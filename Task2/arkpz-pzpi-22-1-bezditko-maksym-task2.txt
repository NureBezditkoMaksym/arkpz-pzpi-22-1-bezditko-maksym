Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії





ЗВІТ
до лабораторної роботи з дисципліни
"Аналіз та рефакторинг коду"
на тему: "РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)"









Виконав ст. гр. ПЗПІ-22-1
Бездітко Максим Андрійович

Перевірив
Сокорчук Ігор Петрович
















Харків 2024 р.

1 МЕТА

Спроєктувати базу даних для серверної частини додатка. Розробити прикладний програмний інтерфейс для роботи з базою даних

2 ХІД РОБОТИ

1. Розробка будови програмної системи
1.1. Архітектурний огляд системи
Система складається з трьох основних компонентів:
Серверна частина:
API-сервер;
База даних;
Модулі обробки даних та сповіщень.
IoT-клієнт:
WIFI-модуль;
Модуль передачі даних;
Модуль звукового сповіщення
Клієнтська частина:
Веб-клієнт;
Мобільний клієнт iOS.

1.2. Деталізація компонентів системи
Серверна частина:
API-сервер
Функціональність:
Прийом та обробка запитів від веб та мобільних клієнтів;
Взаємодія з базою даних для збереження та отримання інформації;
Прийом даних від IoT-клієнтів;
Технології:
Мова програмування: Node.js (Deno);
Безпека: JWT для автентифікації та авторизації;
База даних:
Функціональність:
Зберігання даних про користувачів, їх записи, статистику
Технології:
Реляційна БД PostgreSQL на базі Supabase;
Модуль обробки даних та сповіщень:
Функціональність:
Аналіз наявних сповіщень;
Виявлення відсутності сповіщень;
Генерація та відправка автоматичних пуш-сповіщеннь;
Технології:
Мова програмування: Node.js(Deno);
IoT-клієнт:
Модуль звукового сигналу:
Функціональність:
Відтворення звукового сигналу в разі відсутності записів за поточний день
Технології:
Мікроконтролери: Arduino;
Модуль передачі даних:
Функціональність:
Передача зібраних даних на сервер;
Забезпечення стабільного з'єднання з мережею;
Технології:
Протоколи зв'язку: HTTP;
Мережеві інтерфейси: Ethernet;
Клієнтська частина:
Веб-клієнт:
Функціональність:
Керування користувацькими записами;
Моніторинг користувачів;
Формування та відстеження прогресу користувачів;
Технології:
Фронтенд фреймворки: Refine;
UI бібліотеки: AntD;
Мобільний клієнт
Функціональність:
Перегляд статистики показників у реальному часі;
Отримання пуш-сповіщень;
Технології:
Мова розробки: Swift;
Пуш-сповіщення: Apple Push Notification Service;

1.3. Інтеграція компонентів
Взаємодія IoT-клієнта з сервером:
Протокол обміну даними: HTTP;
Безпека: автентифікація пристроїв на основі сертифікатів або токенів;
Взаємодія клієнтської частини з сервером:
API-запити: RESTful запити з використанням HTTP методів (GET, POST, PUT, DELETE);
Формат даних: JSON для легкого парсингу та взаємодії між клієнтом та сервером.
Автентифікація та авторизація: Використання токенів доступу (JWT), управління сесіями.

1.4. Безпека та відповідність стандартам

У системі передбачено різні ролі та права користувачів, такі як звичайний користувач, преміум-користувач та адміністратор. Це забезпечує захист персональних даних та відповідність стандартам безпеки інформації.

1.5. Схема архітектури системи

[Мобільний Клієнт] <--> (REST API) <--> [Веб Клієнт]
|
[IoT Пристрої] --(HTTPS)--> [API-Сервер] <--(SQL)--> [База Даних]
|
[Мобільний Клієнт] <-- [Модуль Сповіщень]

2. Створення UML діаграми прецедентів для серверної частини системи.
	На основі будови програмної системи розробимо UML діаграму прецедентів, представлену на рисунку 2.1.



Рисунок 2.1 - UML діаграма прецедентів для серверної частини системи

3. Створення ER діаграми даних


Рисунок 3.1 - ER діаграма даних
	На основі будови програмної системи розробимо ER діаграму даних, представлену на рисунку 3.1.

4. Створення бази даних програмної системи

База даних буде розроблена з використанням технології PostgreSQL, відображаючи ER-діаграму та функціональні вимоги. Результатом стане SQL-скрипт для створення повної бази даних системи, представлений у додатку А.

5. Створення діаграми структури БД
	На основі розробленої бази даних створимо діаграму її структури, представлену на рисунку 5.1.


Рисунок 5.1 - Діаграма структури бази даних

6. Розробка функцій роботи з БД (Supabase)

Для зручної роботи та інтеграції з базою даних було обрано платформу Supabase, яка забезпечує ефективний зв'язок між PostgreSQL базою даних і сервером на Node.js. Supabase надає API для взаємодії з базою даних, що дозволяє легко виконувати CRUD-операції без необхідності використання традиційних ORM.

Опишемо приклад взаємодії з таблицею `users` за допомогою Supabase:

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = '<supabase project url>';
const supabaseKey = '<access key>';
const supabase = createClient(supabaseUrl, supabaseKey);

async function getUsers() {
  const { data, error } = await supabase
    .from('users')
    .select('*');

  if (error) {
    console.error('Error fetching users:', error);
    return [];
  }

  return data;
}

async function addUser(username: string, email: string, passwordHash: string) {
  const { data, error } = await supabase
    .from('users')
    .insert([
      { username, email, password_hash: passwordHash }
    ]);

  if (error) {
    console.error('Error adding user:', error);
    return null;
  }

  return data;
}

async function updateUser(userId: number, updates: any) {
  const { data, error } = await supabase
    .from('users')
    .update(updates)
    .eq('user_id', userId);

  if (error) {
    console.error('Error updating user:', error);
    return null;
  }

  return data;
}

async function deleteUser(userId: number) {
  const { data, error } = await supabase
    .from('users')
    .delete()
    .eq('user_id', userId);

  if (error) {
    console.error('Error deleting user:', error);
    return null;
  }

  return data;
}

export {
  getUsers,
  addUser,
  updateUser,
  deleteUser,
};

Цей підхід дозволяє інтегрувати ваші бізнес-вимоги з можливостями Supabase, забезпечуючи ефективну роботу з базою даних та реалізацію необхідних функцій. Supabase надає простий і потужний API для роботи з PostgreSQL, що робить його ідеальним вибором для вашої системи контролю здорового харчування.

7. Розробка API з використанням Supabase Edge Functions

Замість традиційних REST API з використанням Node.js та Express.js, я буду використовувати Supabase Edge Functions для взаємодії серверної частини з клієнтами. Edge Functions дозволяють виконувати серверну логіку ближче до користувачів, що зменшує затримки та підвищує швидкість обробки запитів. Я реалізую типові CRUD-операції для кожної моделі, використовуючи Supabase Edge Functions. Ось приклад для моделі `users`:

Створення Edge Function для отримання всіх користувачів

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = '<supabase project url>';
const supabaseKey = '<access key>';
const supabase = createClient(supabaseUrl, supabaseKey);

export default async function handler(req, res) {
  const { data, error } = await supabase
    .from('users')
    .select('*');

  if (error) {
    return res.status(400).json({ error: error.message });
  }

  return res.status(200).json(data);
}

Створення Edge Function для отримання одного користувача

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = '<supabase project url>';
const supabaseKey = '<access key>';
const supabase = createClient(supabaseUrl, supabaseKey);

export default async function handler(req, res) {
  const { id } = req.query;

  const { data, error } = await supabase
    .from('users')
    .select('*')
    .eq('user_id', id)
    .single();

  if (error) {
    return res.status(404).json({ error: 'User not found' });
  }

  return res.status(200).json(data);
}

Створення Edge Function для додавання нового користувача

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = '<supabase project url>';
const supabaseKey = '<access key>';
const supabase = createClient(supabaseUrl, supabaseKey);

export default async function handler(req, res) {
  const userData = req.body;

  const { data, error } = await supabase
    .from('users')
    .insert([userData]);

  if (error) {
    return res.status(400).json({ error: error.message });
  }

  return res.status(201).json(data);
}

Створення Edge Function для оновлення користувача

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = '<supabase project url>';
const supabaseKey = '<access key>';
const supabase = createClient(supabaseUrl, supabaseKey);

export default async function handler(req, res) {
  const { id } = req.query;
  const updates = req.body;

  const { data, error } = await supabase
    .from('users')
    .update(updates)
    .eq('user_id', id);

  if (error) {
    return res.status(400).json({ error: error.message });
  }

  return res.status(200).json(data);
}


Створення Edge Function для видалення користувача

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = '<supabase project url>';
const supabaseKey = '<access key>';
const supabase = createClient(supabaseUrl, supabaseKey);

export default async function handler(req, res) {
  const { id } = req.query;

  const { data, error } = await supabase
    .from('users')
    .delete()
    .eq('user_id', id);

  if (error) {
    return res.status(404).json({ error: 'User not found' });
  }

  return res.status(204).json({});
}

Ці Edge Functions забезпечують всі необхідні CRUD-операції для моделі `users`, використовуючи можливості Supabase для обробки запитів. Це дозволяє зменшити затримки та підвищити швидкість обробки запитів, забезпечуючи ефективну взаємодію з клієнтами.

8. Створення специфікації розробленого API

Для полегшення інтеграції з іншими системами я розроблю специфікацію API. Хоча традиційно для цього використовується формат OpenAPI, у випадку з Supabase Edge Functions можна створити документацію, яка описує доступні функції, їхні параметри та очікувані відповіді. Це може бути реалізовано у вигляді Markdown-файлу або іншого формату, який легко зрозуміти розробникам. Отримана специфікація буде наведена у додатку Б.

9. Тестування системи

Я запишу детальне відео, яке демонструє тестування взаємодії серверної частини з базою даних, а також взаємодію серверної частини з клієнтом. У відео будуть надані таймкоди для зручності навігації. Посилання на відео: https://youtu.be/wAitpSL1PQ4



ВИСНОВКИ

	У ході виконання роботи було спроєктовано базу даних для серверної частини додатка. Розроблено прикладний програмний інтерфейс для роботи з базою даних.


ДОДАТОК А
SQL-СКРИПТ ДЛЯ СТВОРЕННЯ БАЗИ ДАНИХ

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
-- Create the users table
CREATE TABLE public.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    auth_id UUID UNIQUE REFERENCES auth.users ON DELETE CASCADE NOT NULL,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    is_premium BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
-- Create the health_metrics table
CREATE TABLE public.health_metrics (
    metric_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES public.users(auth_id),
    date DATE NOT NULL,
    calories INT,
    water_ml INT,
    steps INT,
    photo_url VARCHAR(255),
    created_at TIMESTAMPTZ DEFAULT NOW()
);
-- Create the subscriptions table
CREATE TABLE public.subscriptions (
    subscription_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES public.users(auth_id),
    start_date DATE NOT NULL,
    end_date DATE,
    status VARCHAR(20) NOT NULL
);
-- Create the notifications table
CREATE TABLE public.notifications (
    notification_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES public.users(auth_id),
    message TEXT NOT NULL,
    sent_at TIMESTAMPTZ DEFAULT NOW()
);
-- Create the reports table
CREATE TABLE public.reports (
    report_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES public.users(auth_id),
    report_date DATE NOT NULL,
    report_data JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
-- Create the user_roles table
CREATE TABLE public.user_roles (
    role_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    role_name VARCHAR(50) UNIQUE NOT NULL
);
-- Create the user_role_assignments table
CREATE TABLE public.user_role_assignments (
    user_id UUID REFERENCES public.users(auth_id),
    role_id UUID REFERENCES public.user_roles(role_id),
    PRIMARY KEY (user_id, role_id)
);
-- Enable Row Level Security
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
-- Create RLS Policies
CREATE POLICY "Users are viewable by authenticated users" ON public.users FOR
SELECT
  USING (auth.role() = 'authenticated');
CREATE POLICY "Users can be created by authenticated users" ON public.users FOR INSERT
WITH
  CHECK (auth.role() = 'authenticated');
CREATE POLICY "User role can be updated by admins only" ON public.users
FOR UPDATE
  USING (auth.role() = 'authenticated');
-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION public.handle_updated_at() RETURNS trigger AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Create updated_at trigger
CREATE TRIGGER set_updated_at BEFORE
UPDATE ON public.users FOR EACH ROW
EXECUTE FUNCTION public.handle_updated_at();
-- Create function to handle new user creation with error handling
CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS trigger AS $$
BEGIN
    INSERT INTO public.users (
        auth_id,
        username,
        email,
        is_premium
    )
    VALUES (
        NEW.id,
        COALESCE(NEW.raw_user_meta_data ->> 'username', 'Unknown'),
        COALESCE(NEW.email, 'unknown@example.com'),
        COALESCE((NEW.raw_user_meta_data ->> 'is_premium')::boolean, FALSE)
    );
    RETURN NEW;
EXCEPTION
    WHEN others THEN
        RAISE NOTICE 'Error in handle_new_user: %', SQLERRM;
        RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Drop existing trigger if it exists
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
-- Recreate trigger with IF EXISTS check
DO $$
BEGIN
    IF EXISTS (
        SELECT FROM pg_catalog.pg_tables
        WHERE schemaname = 'auth'
        AND tablename = 'users'
    ) THEN
        CREATE TRIGGER on_auth_user_created
        AFTER INSERT ON auth.users
        FOR EACH ROW
        EXECUTE PROCEDURE public.handle_new_user();
    END IF;
END
$$;
-- Create function to handle user updates
CREATE OR REPLACE FUNCTION public.handle_user_updates() RETURNS trigger AS $$
BEGIN
    UPDATE public.users
    SET 
        email = NEW.email,
        updated_at = NOW()
    WHERE auth_id = NEW.id;
    
    RETURN NEW;
EXCEPTION
    WHEN others THEN
        RAISE NOTICE 'Error in handle_user_updates: %', SQLERRM;
        RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
-- Create trigger for user updates
CREATE TRIGGER on_auth_user_updated
    AFTER UPDATE OF email
    ON auth.users
    FOR EACH ROW
    EXECUTE PROCEDURE public.handle_user_updates();
-- Create index on auth_id
CREATE INDEX IF NOT EXISTS users_auth_id_idx ON public.users (auth_id);
-- Grant privileges
GRANT ALL PRIVILEGES ON TABLE public.users TO authenticated;

ДОДАТОК Б
MARKDOWN СПЕЦИФІКАЦІЯ СЕРВЕРНОЇ ЧАСТИНИ

# Edge Functions API Специфікація

## Users

### getAllUsers
Отримання списку всіх користувачів.

**Response 200**
```json
[
  {
    "user_id": "integer",
    "username": "string",
    "email": "string",
    "is_premium": "boolean",
    "created_at": "timestamp"
  }
]
```

### getUser
Отримання інформації про конкретного користувача.

**Parameters**
- `id` (query) - ID користувача

**Response 200**
```json
{
  "user_id": "integer",
  "username": "string",
  "email": "string",
  "is_premium": "boolean",
  "created_at": "timestamp"
}
```

### createUser
Створення нового користувача.

**Request Body**
```json
{
  "username": "string",
  "email": "string",
  "password_hash": "string",
  "is_premium": "boolean"
}
```

**Response 201**
```json
{
  "user_id": "integer",
  "username": "string",
  "email": "string",
  "is_premium": "boolean",
  "created_at": "timestamp"
}
```

### updateUser
Оновлення інформації користувача.

**Parameters**
- `id` (query) - ID користувача

**Request Body**
```json
{
  "username": "string",
  "email": "string",
  "is_premium": "boolean"
}
```

**Response 200**
```json
{
  "user_id": "integer",
  "username": "string",
  "email": "string",
  "is_premium": "boolean",
  "created_at": "timestamp"
}
```

### deleteUser
Видалення користувача.

**Parameters**
- `id` (query) - ID користувача

**Response 204**
Без тіла відповіді

## Health Metrics

### getAllHealthMetrics
Отримання всіх метрик здоров'я.

**Response 200**
```json
[
  {
    "metric_id": "integer",
    "user_id": "integer",
    "date": "date",
    "calories": "integer",
    "water_ml": "integer",
    "steps": "integer",
    "photo_url": "string",
    "created_at": "timestamp"
  }
]
```

### getHealthMetric
Отримання конкретної метрики здоров'я.

**Parameters**
- `id` (query) - ID метрики

**Response 200**
```json
{
  "metric_id": "integer",
  "user_id": "integer",
  "date": "date",
  "calories": "integer",
  "water_ml": "integer",
  "steps": "integer",
  "photo_url": "string",
  "created_at": "timestamp"
}
```

### createHealthMetric
Створення нової метрики здоров'я.

**Request Body**
```json
{
  "user_id": "integer",
  "date": "date",
  "calories": "integer",
  "water_ml": "integer",
  "steps": "integer",
  "photo_url": "string"
}
```

**Response 201**
```json
{
  "metric_id": "integer",
  "user_id": "integer",
  "date": "date",
  "calories": "integer",
  "water_ml": "integer",
  "steps": "integer",
  "photo_url": "string",
  "created_at": "timestamp"
}
```

### updateHealthMetric
Оновлення метрики здоров'я.

**Parameters**
- `id` (query) - ID метрики

**Request Body**
```json
{
  "calories": "integer",
  "water_ml": "integer",
  "steps": "integer",
  "photo_url": "string"
}
```

**Response 200**
```json
{
  "metric_id": "integer",
  "user_id": "integer",
  "date": "date",
  "calories": "integer",
  "water_ml": "integer",
  "steps": "integer",
  "photo_url": "string",
  "created_at": "timestamp"
}
```

### deleteHealthMetric
Видалення метрики здоров'я.

**Parameters**
- `id` (query) - ID метрики

**Response 204**
Без тіла відповіді

## Subscriptions

### getAllSubscriptions
Отримання всіх підписок.

**Response 200**
```json
[
  {
    "subscription_id": "integer",
    "user_id": "integer",
    "start_date": "date",
    "end_date": "date",
    "status": "string"
  }
]
```

### getSubscription
Отримання конкретної підписки.

**Parameters**
- `id` (query) - ID підписки

**Response 200**
```json
{
  "subscription_id": "integer",
  "user_id": "integer",
  "start_date": "date",
  "end_date": "date",
  "status": "string"
}
```

### createSubscription
Створення нової підписки.

**Request Body**
```json
{
  "user_id": "integer",
  "start_date": "date",
  "end_date": "date",
  "status": "string"
}
```

**Response 201**
```json
{
  "subscription_id": "integer",
  "user_id": "integer",
  "start_date": "date",
  "end_date": "date",
  "status": "string"
}
```

### updateSubscription
Оновлення підписки.

**Parameters**
- `id` (query) - ID підписки

**Request Body**
```json
{
  "end_date": "date",
  "status": "string"
}
```

**Response 200**
```json
{
  "subscription_id": "integer",
  "user_id": "integer",
  "start_date": "date",
  "end_date": "date",
  "status": "string"
}
```

### deleteSubscription
Видалення підписки.

**Parameters**
- `id` (query) - ID підписки

**Response 204**
Без тіла відповіді

## Notifications

### getAllNotifications
Отримання всіх сповіщень.

**Response 200**
```json
[
  {
    "notification_id": "integer",
    "user_id": "integer",
    "message": "string",
    "sent_at": "timestamp"
  }
]
```

### getNotification
Отримання конкретного сповіщення.

**Parameters**
- `id` (query) - ID сповіщення

**Response 200**
```json
{
  "notification_id": "integer",
  "user_id": "integer",
  "message": "string",
  "sent_at": "timestamp"
}
```

### createNotification
Створення нового сповіщення.

**Request Body**
```json
{
  "user_id": "integer",
  "message": "string"
}
```

**Response 201**
```json
{
  "notification_id": "integer",
  "user_id": "integer",
  "message": "string",
  "sent_at": "timestamp"
}
```

### updateNotification
Оновлення сповіщення.

**Parameters**
- `id` (query) - ID сповіщення

**Request Body**
```json
{
  "message": "string"
}
```

**Response 200**
```json
{
  "notification_id": "integer",
  "user_id": "integer",
  "message": "string",
  "sent_at": "timestamp"
}
```

### deleteNotification
Видалення сповіщення.

**Parameters**
- `id` (query) - ID сповіщення

**Response 204**
Без тіла відповіді

## Reports

### getAllReports
Отримання всіх звітів.

**Response 200**
```json
[
  {
    "report_id": "integer",
    "user_id": "integer",
    "report_date": "date",
    "report_data": "jsonb",
    "created_at": "timestamp"
  }
]
```

### getReport
Отримання конкретного звіту.

**Parameters**
- `id` (query) - ID звіту

**Response 200**
```json
{
  "report_id": "integer",
  "user_id": "integer",
  "report_date": "date",
  "report_data": "jsonb",
  "created_at": "timestamp"
}
```

### createReport
Створення нового звіту.

**Request Body**
```json
{
  "user_id": "integer",
  "report_date": "date",
  "report_data": "jsonb"
}
```

**Response 201**
```json
{
  "report_id": "integer",
  "user_id": "integer",
  "report_date": "date",
  "report_data": "jsonb",
  "created_at": "timestamp"
}
```

### updateReport
Оновлення звіту.

**Parameters**
- `id` (query) - ID звіту

**Request Body**
```json
{
  "report_data": "jsonb"
}
```

**Response 200**
```json
{
  "report_id": "integer",
  "user_id": "integer",
  "report_date": "date",
  "report_data": "jsonb",
  "created_at": "timestamp"
}
```

### deleteReport
Видалення звіту.

**Parameters**
- `id` (query) - ID звіту

**Response 204**
Без тіла відповіді

## User Roles

### getAllRoles
Отримання всіх ролей.

**Response 200**
```json
[
  {
    "role_id": "integer",
    "role_name": "string"
  }
]
```

### getRole
Отримання конкретної ролі.

**Parameters**
- `id` (query) - ID ролі

**Response 200**
```json
{
  "role_id": "integer",
  "role_name": "string"
}
```

### createRole
Створення нової ролі.

**Request Body**
```json
{
  "role_name": "string"
}
```

**Response 201**
```json
{
  "role_id": "integer",
  "role_name": "string"
}
```

### updateRole
Оновлення ролі.

**Parameters**
- `id` (query) - ID ролі

**Request Body**
```json
{
  "role_name": "string"
}
```

**Response 200**
```json
{
  "role_id": "integer",
  "role_name": "string"
}
```

### deleteRole
Видалення ролі.

**Parameters**
- `id` (query) - ID ролі

**Response 204**
Без тіла відповіді

## Role Assignments

### assignRole
Призначення ролі користувачу.

**Request Body**
```json
{
  "user_id": "integer",
  "role_id": "integer"
}
```

**Response 201**
```json
{
  "user_id": "integer",
  "role_id": "integer"
}
```

### removeRole
Видалення ролі у користувача.

**Parameters**
- `userId` (query) - ID користувача
- `roleId` (query) - ID ролі

**Response 204**
Без тіла відповіді

### getUserRoles
Отримання всіх ролей користувача.

**Parameters**
- `userId` (query) - ID користувача

**Response 200**
```json
[
  {
    "user_id": "integer",
    "user_roles": {
      "role_id": "integer",
      "role_name": "string"
    }
  }
]
```

## Помилки

Всі функції можуть повертати наступні помилки:

### 400 Bad Request
```json
{
  "error": "string"
}
```

### 404 Not Found
```json
{
  "error": "string"
}
```

### 500 Internal Server Error
```json
{
  "error": "string"
}
```